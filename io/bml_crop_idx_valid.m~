function [starts_idx,ends_idx] = bml_crop_idx_valid(cfg, starts, ends, samples)

% BML_CROP_IDX calculates valid sample indices for a time window and file coordinates
%
% Use as 
%   [starts_idx,ends_idx] = bml_crop_idx(cfg)
%   [starts_idx,ends_idx] = bml_crop_idx(cfg, starts, ends)
%   [starts_idx,ends_idx] = bml_crop_idx(cfg, starts, [], samples)
%   [starts_idx,ends_idx] = bml_crop_idx(cfg, [], ends, samples)
%
% where cfg is a configuration structure or roi table row
% cfg.starts
% cfg.ends
% (cfg.samples)
% cfg.t1
% cfg.s1
% cfg.t2
% cfg.s2
% cfg.tol - double: tolerance. Defaults to 1e-3/Fs. 
% cfg.nSamples - double: total number of samples in file
%
% if starts and ends are given (3 argument call) the values of cfg are
% ignored

nSamples=bml_getopt(cfg,'nSamples');

[starts_idx,ends_idx] = bml_crop_idx(cfg, starts, ends, samples);

% check consistency in bml_roi_table, overflow indices useful for padding
if starts_idx<=0
  starts_idx=1;
elseif starts_idx>nSamples
  error('starts time exceeds end of file');
end
  if starts_idx>nSamples; error('starts index exceeds number of samples in file'); end
  if ends_idx>nSamples; error('ends index exceeds number of samples in file'); end
end